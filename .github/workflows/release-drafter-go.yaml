on:
  workflow_call:
    secrets: {}
    inputs:
      config-name:
        type: string
        description: >-
          Config filename. This should either be present in your repository's
          .github folder or .github repo's .github folder.
        required: false
        default: release-drafter.yml
      commitish:
        type: string
        description: >-
          Commitish to use when calculating the version bump. Defaults to the
          pull request base branch.
        required: false
        default: main
      publish:
        type: boolean
        description: Publish the release draft. Defaults to false.
        required: false
        default: false
      project-path:
        type: string
        description: The path to go project
        required: false
        default: .
      ignore-major-changes-for-pattern:
        type: string
        description: >-
          A regular expression pattern to match against incompatible changes.
          If incompatible changes are detected on api-diff's output  matching this pattern, the release drafter will not bump the major version.
          Eg: (\S+)\/(v\d+beta\d+)\.(\S+), this will ignore incompatible changes
          in the api-diff output, matching
          ./coopnorge/<projectpath>/v1beta2.(<RPCNameORMessageName>).GetEmailAddresses: removed
        required: false
        default: ""
    outputs:
      id:
        value: ${{ jobs.draft-release.outputs.id }}
        description: >-
          The ID of the release that was created or updated.
      name:
        value: ${{ jobs.draft-release.outputs.name }}
        description: >-
          The name of this release.
      tag_name:
        value: ${{ jobs.draft-release.outputs.tag_name }}
        description: >-
          The name of the tag associated with this release.
      body:
        value: ${{ jobs.draft-release.outputs.body }}
        description: >-
          The body of the drafted release, useful if it needs to be included  in files.
      html_url:
        value: ${{ jobs.draft-release.outputs.html_url }}
        description: >-
          The URL users can navigate to in order to view the release.  i.e. https://github.com/octocat/Hello-World/releases/v1.0.0.
      upload_url:
        value: ${{ jobs.draft-release.outputs.upload_url }}
        description: >-
          The URL for uploading assets to the release, which could be  used by GitHub Actions for additional uses, for example the  @actions/upload-release-asset GitHub Action.
jobs:
  label-pr-go:
    if: github.event_name == 'pull_request'
    name: Label PR (Golang)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5.5.0
        with:
          go-version-file: "${{ inputs.project-path }}/go.mod"
      - name: Configure access to internal and private GitHub repos
        run: |
          if [ -n "${{ secrets.REVIEWBOT_GITHUB_TOKEN }}" ]; then
            git config --global url."https://${{ secrets.REVIEWBOT_GITHUB_TOKEN }}:x-oauth-basic@github.com/coopnorge".insteadOf "https://github.com/coopnorge";
          else
            echo "REVIEWBOT_GITHUB_TOKEN is not set. Skipping Git configuration.";
          fi
      - name: Install API DIff
        run: go install golang.org/x/exp/cmd/apidiff@latest
      - name: Get PR diff
        id: apidiff
        run: |
          cd ${{ inputs.project-path }}
          git diff --name-only origin/main HEAD | grep '\.go$' > changes.txt || true
          if [ -s changes.txt ]; then
            echo "Detected Go changes. Checking API diff..."

            apidiff -m -w new.txt ./...

            git checkout origin/main
            apidiff -m -w old.txt ./...

            DIFFERENCE=$(apidiff -m old.txt new.txt)
            if [ "$DIFFERENCE" != "" ]; then
              echo "API diff detected. $DIFFERENCE"

              if echo "$DIFFERENCE" | grep -q -i "incompatible change"; then
                if [ "${{ inputs.ignore-major-changes-for-pattern }}" != "" ]; then

                  if apidiff -m -incompatible old.txt new.txt | grep -qvE "${{ inputs.ignore-major-changes-for-pattern }}"; then
                    # If the change is not ignored by the pattern, bump major
                    echo "Incompatible API change detected."
                    echo "semver-type=major" >> $GITHUB_OUTPUT
                  else
                    echo "Incompatible API change detected, but ignored by pattern."
                    echo "semver-type=minor" >> $GITHUB_OUTPUT
                  fi
                else
                  echo "Incompatible API change detected."
                  echo "semver-type=major" >> $GITHUB_OUTPUT
                fi
              elif echo "$DIFFERENCE" | grep -q -i "compatible change"; then
                echo "Compatible API change detected."
                echo "semver-type=minor" >> $GITHUB_OUTPUT
              else
                echo "Non-breaking API change detected."
                echo "semver-type=patch" >> $GITHUB_OUTPUT
              fi
            else
              echo "No API diff detected."
              echo "semver-type=patch" >> $GITHUB_OUTPUT
            fi
          else
            echo "No Go changes detected."
            echo "semver-type=patch" >> $GITHUB_OUTPUT
          fi
      - uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request'
        env:
          LABEL: "${{ steps.apidiff.outputs.semver-type }}"
        with:
          script: |
            const { LABEL } = process.env;
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [`release-drafter-go:${LABEL}`]
            })
  draft-release:
    name: Draft Release
    uses: >-
      coopnorge/github-workflow-release-drafter/.github/workflows/release-drafter.yaml@v0.7.0
    with:
      config-name: "${{ inputs.config-name }}"
      commitish: "${{ inputs.commitish }}"
      publish: ${{ inputs.publish }}
